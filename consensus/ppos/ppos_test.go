package ppos_test

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus"
	"github.com/ethereum/go-ethereum/consensus/ethash"
	"github.com/ethereum/go-ethereum/consensus/ppos"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/eth"
	"github.com/ethereum/go-ethereum/eth/ethconfig"
	"github.com/ethereum/go-ethereum/ethdb"
	"github.com/ethereum/go-ethereum/node"
	"github.com/ethereum/go-ethereum/params"
)

// So we can deterministically seed different blockchains
var (
	canonicalSeed = 1
	forkSeed      = 2
)

var genesis = &core.Genesis{
	Config: params.AllPposProtocolChanges,
	Alloc: types.GenesisAlloc{
		common.HexToAddress("000000000000000000000000000000000000F000"): {Balance: big.NewInt(0x0), BalancePpt: big.NewInt(0x0), Code: []byte(SystemContractCode)},
		common.HexToAddress("000000000000000000000000000000000000F001"): {Balance: big.NewInt(0x0), BalancePpt: big.NewInt(0x0), Code: []byte("0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063be645692116100a2578063db78dd2811610071578063db78dd281461022f578063e0d8ea5314610254578063ea7221a11461025c578063efd8d8e21461022f578063f62af26c1461028257610116565b8063be645692146101e3578063c967f90f146101eb578063cb1ea7251461020a578063d93d2cb91461021257610116565b80633a061bd3116100e95780633a061bd31461019b57806344c1aa99146101a35780636233be5d146101ab57806363e1d451146101b35780638129fc1c146101d957610116565b8063158ef93e1461011b5780631b5e358c146101375780632897183d1461015b57806332f3c17f14610175575b600080fd5b61012361029f565b604080519115158252519081900360200190f35b61013f6102a8565b604080516001600160a01b039092168252519081900360200190f35b6101636102ae565b60408051918252519081900360200190f35b6101636004803603602081101561018b57600080fd5b50356001600160a01b03166102b4565b61013f6102cf565b6101636102d5565b61013f6102db565b610123600480360360208110156101c957600080fd5b50356001600160a01b03166102e1565b6101e161050d565b005b610163610590565b6101f3610598565b6040805161ffff9092168252519081900360200190f35b61016361059d565b6101e16004803603602081101561022857600080fd5b50356105a3565b610237610846565b6040805167ffffffffffffffff9092168252519081900360200190f35b61016361084b565b6101e16004803603602081101561027257600080fd5b50356001600160a01b0316610851565b61013f6004803603602081101561029857600080fd5b5035610b8b565b60005460ff1681565b61f00181565b60035481565b6001600160a01b031660009081526005602052604090205490565b61f00081565b60025481565b61f00281565b6000805460ff16610328576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b3361f0001461037e576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054156103b6576001600160a01b0382166000908152600560205260408120555b6001600160a01b03821660009081526005602052604090206002015460ff1680156103e2575060065415155b15610505576006546001600160a01b038316600090815260056020526040902060010154600019909101146104ac576006805460009190600019810190811061042757fe5b60009182526020808320909101546001600160a01b038681168452600590925260409092206001015460068054929093169350839291811061046557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558583168252600590526040808220600190810154949093168252902001555b60068054806104b757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416825260059052604081206001810191909155600201805460ff191690555b506001919050565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600480546001600160a01b03191661f0001790556018600181815560306002556003919091556000805460ff19169091179055565b6305f5e10081565b601581565b60015481565b3341146105e4576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b4360009081526008602052604090205460ff161561063d576040805162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc99585cd959607a1b604482015290519081900360640190fd5b60005460ff16610683576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b8080438161068d57fe5b06156106d3576040805162461bcd60e51b815260206004820152601060248201526f426c6f636b2065706f6368206f6e6c7960801b604482015290519081900360640190fd5b436000908152600860205260409020805460ff191660011790556006546106f957610842565b60005b600654811015610817576003546002548161071357fe5b04600560006006848154811061072557fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205411156107d6576003546002548161075d57fe5b04600560006006848154811061076f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120546006805493909103926005929190859081106107ac57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205561080f565b600060056000600684815481106107e957fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b6001016106fc565b506040517f181d51be54e8e8eaca6eae0eab32d4162099236bd519e7238d015d0870db464190600090a15b5050565b606481565b60065490565b334114610892576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff166108d8576040805162461bcd60e51b815260206004820152600c60248201526b139bdd081a5b9a5d081e595d60a21b604482015290519081900360640190fd5b4360009081526007602052604090205460ff1615610930576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c1d5b9a5cda195960821b604482015290519081900360640190fd5b436000908152600760209081526040808320805460ff191660011790556001600160a01b0384168352600590915290206002015460ff166109d957600680546001600160a01b038316600081815260056020526040812060018082018590558085019095557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90930180546001600160a01b0319168317905552600201805460ff191690911790555b6001600160a01b03811660009081526005602052604090208054600101908190556002549081610a0557fe5b06610aa457600460009054906101000a90046001600160a01b03166001600160a01b03166340a141ff826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b5050506001600160a01b03821660009081526005602052604081205550610b49565b6001546001600160a01b03821660009081526005602052604090205481610ac757fe5b06610b4957600460009054906101000a90046001600160a01b03166001600160a01b0316635dd09590826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050505b6040805142815290516001600160a01b038316917f770e0cca42c35d00240986ce8d3ed438be04663c91dac6576b79537d7c180f1e919081900360200190a250565b60068181548110610b9857fe5b6000918252602090912001546001600160a01b031690508156fea2646970667358221220aca94443f40b1ca12c5064a2477f99cdd2c3d73e3630f0faeea74438a189fc2a64736f6c634300060c0033")},
		common.HexToAddress("000000000000000000000000000000000000F002"): {Balance: big.NewInt(0x0), BalancePpt: big.NewInt(0x0), Code: []byte("0x608060405234801561001057600080fd5b50600436106101005760003560e01c806382c4b3b211610097578063c967f90f11610066578063c967f90f146103ff578063db78dd281461041e578063e823c81414610443578063efd8d8e21461041e57610100565b806382c4b3b21461032a578063a224cee714610350578063a4c4d922146103c0578063be645692146103e557610100565b80631f4f7d29116100d35780631f4f7d29146101c157806332ed5b121461023f5780633a061bd31461031a5780636233be5d1461032257610100565b8063158ef93e1461010557806315ea2781146101215780631b5e358c146101475780631db5ade81461016b575b600080fd5b61010d61044b565b604080519115158252519081900360200190f35b61010d6004803603602081101561013757600080fd5b50356001600160a01b0316610454565b61014f610509565b604080516001600160a01b039092168252519081900360200190f35b6101976004803603604081101561018157600080fd5b506001600160a01b03813516906020013561050f565b604080516001600160a01b0390941684526020840192909252151582820152519081900360600190f35b61010d600480360360408110156101d757600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460018302840111600160201b8311171561023457600080fd5b509092509050610548565b61025c6004803603602081101561025557600080fd5b5035610810565b60405180886001600160a01b03168152602001876001600160a01b03168152602001806020018681526020018561ffff1681526020018461ffff1681526020018315158152602001828103825287818151815260200191508051906020019080838360005b838110156102d95781810151838201526020016102c1565b50505050905090810190601f1680156103065780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61014f6108ef565b61014f6108f5565b61010d6004803603602081101561034057600080fd5b50356001600160a01b03166108fb565b6103be6004803603602081101561036657600080fd5b810190602081018135600160201b81111561038057600080fd5b82018360208201111561039257600080fd5b803590602001918460208302840111600160201b831117156103b357600080fd5b509092509050610910565b005b61010d600480360360408110156103d657600080fd5b50803590602001351515610a5b565b6103ed611178565b60408051918252519081900360200190f35b610407611180565b6040805161ffff9092168252519081900360200190f35b610426611185565b6040805167ffffffffffffffff9092168252519081900360200190f35b6103ed61118a565b60005460ff1681565b60003361f000146104ac576040805162461bcd60e51b815260206004820152601860248201527f56616c696461746f727320636f6e7472616374206f6e6c790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff19169055815142815291517f4e0b191f7f5c32b1b5e3704b68874b1a3980147cae00be8ece271bfb5b92c07a9281900390910190a2506001919050565b61f00181565b60046020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03909116919060ff1683565b6001600160a01b03831660009081526002602052604081205460ff16156105a05760405162461bcd60e51b81526004018080602001828103825260298152602001806112616029913960400191505060405180910390fd5b6000338585854260405160200180866001600160a01b031660601b8152601401856001600160a01b031660601b81526014018484808284379190910192835250506040805180830381526020928301909152805191012094505050610bb885111591506106499050576040805162461bcd60e51b815260206004820152601060248201526f44657461696c7320746f6f206c6f6e6760801b604482015290519081900360640190fd5b60008181526003602081905260409091200154156106ae576040805162461bcd60e51b815260206004820152601760248201527f50726f706f73616c20616c726561647920657869737473000000000000000000604482015290519081900360640190fd5b6106b6611190565b3381526001600160a01b03861660208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201829052506040808701958652426060880152878252600360209081529120865181546001600160a01b039182166001600160a01b031991821617835583890151600184018054919093169116179055945180518796955061076094506002860193509101906111cd565b506060820151600382015560808201516004909101805460a084015160c09094015161ffff1990911661ffff9384161763ffff000019166201000093909416929092029290921764ff000000001916600160201b911515919091021790556040805142815290516001600160a01b03881691339185917fc10f2f4d53a0e342536c6af3cce9c6ee25c32dbb323521ce0e1d4494a3e362e8916020918190039190910190a450600195945050505050565b60036020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f81018790048702840187019097528683526001600160a01b03938416969390911694919290918301828280156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b50505050600383015460049093015491929161ffff80821692506201000082041690600160201b900460ff1687565b61f00081565b61f00281565b60026020526000908152604090205460ff1681565b60005460ff161561095e576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b62093a80600155600580546001600160a01b03191661f00017905560005b81811015610a4957600083838381811061099257fe5b905060200201356001600160a01b03166001600160a01b031614156109fe576040805162461bcd60e51b815260206004820152601960248201527f496e76616c69642076616c696461746f72206164647265737300000000000000604482015290519081900360640190fd5b600160026000858585818110610a1057fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff191691151591909117905560010161097c565b50506000805460ff1916600117905550565b60055460408051631015428760e21b815233600482015290516000926001600160a01b0316916340550a1c916024808301926020929190829003018186803b158015610aa657600080fd5b505afa158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b5051610b14576040805162461bcd60e51b815260206004820152600e60248201526d56616c696461746f72206f6e6c7960901b604482015290519081900360640190fd5b60008381526003602081905260409091200154610b6d576040805162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b604482015290519081900360640190fd5b33600090815260046020908152604080832086845290915290206001015415610bc75760405162461bcd60e51b815260040180806020018281038252602381526020018061128a6023913960400191505060405180910390fd5b60015460008481526003602081905260409091200154014210610c24576040805162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b604482015290519081900360640190fd5b336000818152600460209081526040808320878452825291829020426001820181905581546001600160a01b031916851782556002909101805460ff1916871515908117909155835190815291820152815186927f6c59bda68cac318717c60c7c9635a78a0f0613f9887cc18a7157f5745a86d14e928290030190a38115610cd2576000838152600360205260409020600401805461ffff8082166001011661ffff19909116179055610d06565b60008381526003602052604090206004018054600161ffff62010000808404821692909201160263ffff0000199091161790555b6000838152600360209081526040808320600101546001600160a01b03168352600290915290205460ff1680610d545750600083815260036020526040902060040154600160201b900460ff165b15610d6157506001611172565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610de357600080fd5b8101908080516040519392919084600160201b821115610e0257600080fd5b908301906020820185811115610e1757600080fd5b82518660208202830111600160201b82111715610e3357600080fd5b82525081516020918201928201910280838360005b83811015610e60578181015183820152602001610e48565b505050509050016040525050505181610e7557fe5b60008581526003602052604090206004015491900460010161ffff90911610610fbd576000838152600360208181526040808420600181810180546001600160a01b03908116885260028652848820805460ff19169093179092558987529484526004918201805464ff000000001916600160201b1790556005549454835163415e9ec960e11b815290821692810192909252915193909116936382bd3d9293602480840194939192918390030190829087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505050506040513d6020811015610f5f57600080fd5b505060008381526003602090815260409182902060010154825142815292516001600160a01b039091169286927fc9d96d61eb62031865c523ae107f3c22f5ed445af237636bcd88bea1705c70d592918290030190a3506001611172565b600554604080516313bce04b60e31b815290516002926001600160a01b031691639de70258916004808301926000929190829003018186803b15801561100257600080fd5b505afa158015611016573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103f57600080fd5b8101908080516040519392919084600160201b82111561105e57600080fd5b90830190602082018581111561107357600080fd5b82518660208202830111600160201b8211171561108f57600080fd5b82525081516020918201928201910280838360005b838110156110bc5781810151838201526020016110a4565b5050505090500160405250505051816110d157fe5b046001016003600085815260200190815260200160002060040160029054906101000a900461ffff1661ffff161061116e5760008381526003602090815260409182902060048101805464ff000000001916600160201b17905560010154825142815292516001600160a01b039091169286927fec955d77e6e7d74e18b1c91977ef0f6fd5a6d02a28d1979686339fe69399782592918290030190a35b5060015b92915050565b6305f5e10081565b601581565b606481565b60015481565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061120e57805160ff191683800117855561123b565b8280016001018555821561123b579182015b8281111561123b578251825591602001919060010190611220565b5061124792915061124b565b5090565b5b80821115611247576000815560010161124c56fe44737420616c7265616479207061737365642c20596f752063616e207374617274207374616b696e67596f752063616e277420766f746520666f7220612070726f706f73616c207477696365a2646970667358221220cdac42c060e05ec74719c35ddb223eca383d86f5a63e4db3ef3fede9ee9c042364736f6c634300060c0033")},
		common.HexToAddress("10c033e050e10510a951a56e4a14b4cd3de6ca67"): {Balance: big.NewInt(0xDE0B6B3A764), BalancePpt: big.NewInt(0x0)},
		common.HexToAddress("360e02cda8baad476f39d5aaff82d6942393ca99"): {Balance: big.NewInt(0xDE0B6B3A764), BalancePpt: big.NewInt(0x0)},
		common.HexToAddress("37B6cA0eF49865e4E1439D62b21aDdB6aF1Bcf25"): {Balance: big.NewInt(0xDE0B6B3A764), BalancePpt: big.NewInt(0x0)},
		common.HexToAddress("1a26C890Cf7EE105f1301AFf54ed1f489527E3f4"): {Balance: big.NewInt(0xDE0B6B3A764), BalancePpt: big.NewInt(0x0)},
	},
	ExtraData: []byte("0x000000000000000000000000000000000000000000000000000000000000000010c033e050e10510a951a56e4a14b4cd3de6ca67360e02cda8baad476f39d5aaff82d6942393ca990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	Timestamp: 9000,
	BaseFee:   big.NewInt(params.InitialBaseFee),
}

// newCanonical creates a chain database, and injects a deterministic canonical
// chain. Depending on the full flag, it creates either a full block chain or a
// header only chain. The database and genesis specification for block generation
// are also returned in case more test blocks are needed later.
func newCanonical(engine consensus.Engine, n int, full bool, scheme string) (ethdb.Database, *core.Genesis, *core.BlockChain, error) {
	// Initialize a fresh chain with only a genesis block
	blockchain, _ := core.NewBlockChain(rawdb.NewMemoryDatabase(), core.DefaultCacheConfigWithScheme(scheme), genesis, nil, engine, vm.Config{}, nil, nil)

	// Create and inject the requested chain
	if n == 0 {
		return rawdb.NewMemoryDatabase(), genesis, blockchain, nil
	}
	if full {
		// Full block-chain requested
		genDb, blocks := core.MakeBlockChainWithGenesis(genesis, n, engine, canonicalSeed)
		_, err := blockchain.InsertChain(blocks)
		return genDb, genesis, blockchain, err
	}
	// Header-only chain requested
	genDb, headers := core.MakeHeaderChainWithGenesis(genesis, n, engine, canonicalSeed)
	_, err := blockchain.InsertHeaderChain(headers)
	return genDb, genesis, blockchain, err
}

// TestBlockChainImport tries to process a chain of blocks, writing them into
// the database if successful.
func testBlockChainImport(chain types.Blocks, blockchain *core.BlockChain) error {
	return nil
}

func TestInitializeSystemContracts(t *testing.T) {
	paramConfig := params.AllPposProtocolChanges
	// Generate test chain.

	// Create node
	n, err := node.New(&node.Config{})
	if err != nil {
		t.Fatalf("can't create new node: %v", err)
	}
	// Create Ethereum Service
	config := &ethconfig.Config{Genesis: genesis}

	// Assemble the Ethereum object
	chainDb, err := n.OpenDatabaseWithFreezer("chaindata", config.DatabaseCache, config.DatabaseHandles, config.DatabaseFreezer, "eth/db/chaindata/", false)
	if err != nil {
		t.Fatalf("failed in creating chain db")
	}

	engine := ppos.New(paramConfig, chainDb)
	genDb, _, blockchain, err := newCanonical(engine, 1, true, "path")
	if err != nil {
		t.Fatalf("failed in creating chain db")
	}

	chain := core.MakeBlockChain(paramConfig, blockchain.GetBlockByHash(blockchain.CurrentBlock().Hash()), 5, ethash.NewFaker(), genDb, forkSeed)[1:]
	if err := testBlockChainImport(chain, blockchain); err == nil {
		t.Errorf("broken block chain not reported")
	}

	prev := blockchain.CurrentBlock()
	for block := blockchain.GetBlockByNumber(blockchain.CurrentBlock().Number.Uint64() - 1); block.NumberU64() != 0; prev, block = block.Header(), blockchain.GetBlockByNumber(block.NumberU64()-1) {
		if prev.ParentHash != block.Hash() {
			t.Errorf("parent block hash mismatch: have %x, want %x", prev.ParentHash, block.Hash())
		}

		statedb, err := state.New(blockchain.GetBlockByHash(block.ParentHash()).Root(), blockchain.StateCache(), nil)
		if err != nil {
			t.Fatalf("failed in creating chain db")
		}
		err = engine.InitializeSystemContracts(blockchain, blockchain.CurrentHeader(), statedb)
		if err != nil {
			t.Fatalf("failed in eth service")
		}
	}
}

func TestPunishValidators(t *testing.T) {
	paramConfig := params.AllPposProtocolChanges
	// Generate test chain.

	// Create node
	n, err := node.New(&node.Config{})
	if err != nil {
		t.Fatalf("can't create new node: %v", err)
	}
	// Create Ethereum Service
	config := &ethconfig.Config{Genesis: genesis}
	ethservice, err := eth.New(n, config)
	if err != nil {
		t.Fatalf("failed in eth service")
	}

	// Assemble the Ethereum object
	chainDb, err := n.OpenDatabaseWithFreezer("chaindata", config.DatabaseCache, config.DatabaseHandles, config.DatabaseFreezer, "eth/db/chaindata/", false)
	if err != nil {
		t.Fatalf("failed in creating chain db")
	}

	engine := ppos.New(paramConfig, chainDb)

	blockchain := ethservice.BlockChain()

	err = engine.TryPunishValidator(blockchain, blockchain.CurrentHeader(), nil)
	if err != nil {
		t.Fatalf("failed in eth service")
	}
}

func TestRewardValidatorTest(t *testing.T) {
	paramConfig := params.AllPposProtocolChanges
	// Generate test chain.

	// Create node
	n, err := node.New(&node.Config{})
	if err != nil {
		t.Fatalf("can't create new node: %v", err)
	}
	// Create Ethereum Service
	config := &ethconfig.Config{Genesis: genesis}

	// Assemble the Ethereum object
	chainDb, err := n.OpenDatabaseWithFreezer("chaindata", config.DatabaseCache, config.DatabaseHandles, config.DatabaseFreezer, "eth/db/chaindata/", false)
	if err != nil {
		t.Fatalf("failed in creating chain db")
	}

	engine := ppos.New(paramConfig, chainDb)
	genDb, _, blockchain, err := newCanonical(engine, 1, true, "path")
	if err != nil {
		t.Fatalf("failed in creating chain db")
	}

	chain := core.MakeBlockChain(paramConfig, blockchain.GetBlockByHash(blockchain.CurrentBlock().Hash()), 5, ethash.NewFaker(), genDb, forkSeed)[1:]
	if err := testBlockChainImport(chain, blockchain); err == nil {
		t.Errorf("broken block chain not reported")
	}

	prev := blockchain.CurrentBlock()
	for block := blockchain.GetBlockByNumber(blockchain.CurrentBlock().Number.Uint64() - 1); block.NumberU64() != 0; prev, block = block.Header(), blockchain.GetBlockByNumber(block.NumberU64()-1) {
		if prev.ParentHash != block.Hash() {
			t.Errorf("parent block hash mismatch: have %x, want %x", prev.ParentHash, block.Hash())
		}

		statedb, err := state.New(blockchain.GetBlockByHash(block.ParentHash()).Root(), blockchain.StateCache(), nil)
		if err != nil {
			t.Fatalf("failed in creating chain db")
		}
		err = engine.TrySendBlockReward(blockchain, blockchain.CurrentHeader(), statedb)
		if err != nil {
			t.Fatalf("failed in eth service")
		}
	}
}
